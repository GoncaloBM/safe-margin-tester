{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport default function useEventListener(eventName, handler, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef(); // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    // Make sure element supports addEventListener\n    const isSupported = element && element.addEventListener;\n    if (!isSupported) return; // Create event listener that calls handler function stored in ref\n\n    const eventListener = event => savedHandler.current(event); // Add event listener\n\n\n    element.addEventListener(eventName, eventListener); // Remove event listener on cleanup\n\n    return () => {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element] // Re-run if eventName or element changes\n  );\n}","map":{"version":3,"sources":["/Users/GoncaloMira1/App/safe-margin-tester/src/use-event-listener.js"],"names":["useEffect","useRef","useEventListener","eventName","handler","element","window","savedHandler","current","isSupported","addEventListener","eventListener","event","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA,eAAe,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,OAAO,GAAGC,MAAxD,EAAgE;AAC7E;AACA,QAAMC,YAAY,GAAGN,MAAM,EAA3B,CAF6E,CAI7E;AACA;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,YAAY,CAACC,OAAb,GAAuBJ,OAAvB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAJ,EAAAA,SAAS,CACP,MAAM;AACJ;AACA,UAAMS,WAAW,GAAGJ,OAAO,IAAIA,OAAO,CAACK,gBAAvC;AACA,QAAI,CAACD,WAAL,EAAkB,OAHd,CAKJ;;AACA,UAAME,aAAa,GAAGC,KAAK,IAAIL,YAAY,CAACC,OAAb,CAAqBI,KAArB,CAA/B,CANI,CAQJ;;;AACAP,IAAAA,OAAO,CAACK,gBAAR,CAAyBP,SAAzB,EAAoCQ,aAApC,EATI,CAWJ;;AACA,WAAO,MAAM;AACXN,MAAAA,OAAO,CAACQ,mBAAR,CAA4BV,SAA5B,EAAuCQ,aAAvC;AACD,KAFD;AAGD,GAhBM,EAiBP,CAACR,SAAD,EAAYE,OAAZ,CAjBO,CAiBc;AAjBd,GAAT;AAmBD","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport default function useEventListener(eventName, handler, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef();\n\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      const isSupported = element && element.addEventListener;\n      if (!isSupported) return;\n\n      // Create event listener that calls handler function stored in ref\n      const eventListener = event => savedHandler.current(event);\n\n      // Add event listener\n      element.addEventListener(eventName, eventListener);\n\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener);\n      };\n    },\n    [eventName, element] // Re-run if eventName or element changes\n  );\n}\n"]},"metadata":{},"sourceType":"module"}